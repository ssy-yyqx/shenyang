/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2020 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./when-4ca4e419","./Check-430b3551","./Math-c0afb7aa","./Cartesian2-0cd32dae","./defineProperties-24e785e9","./Transforms-1f147cce","./RuntimeError-443472b0","./WebGLConstants-2ddfa2f9","./ComponentDatatype-adb4702b","./GeometryAttribute-ebf6a4c7","./GeometryAttributes-614c63f8","./IndexDatatype-a78bfe07","./IntersectionTests-9618f995","./Plane-6d029ea4","./VertexFormat-95f25802","./EllipsoidTangentPlane-6e29c6f6","./EllipsoidRhumbLine-aeb03c9a","./PolygonPipeline-d378df2d","./EllipsoidGeodesic-f0d5153e","./PolylinePipeline-1211a424","./WallGeometryLibrary-9676c43f"],function(R,e,M,N,t,W,a,i,B,U,q,J,n,r,d,o,s,m,l,p,Y){"use strict";var Z=new N.Cartesian3,j=new N.Cartesian3,K=new N.Cartesian3,Q=new N.Cartesian3,X=new N.Cartesian3,$=new N.Cartesian3,ee=new N.Cartesian3,te=new N.Cartesian3;function u(e){var t=(e=R.defaultValue(e,R.defaultValue.EMPTY_OBJECT)).positions,a=e.maximumHeights,i=e.minimumHeights,n=R.defaultValue(e.vertexFormat,d.VertexFormat.DEFAULT),r=R.defaultValue(e.granularity,M.CesiumMath.RADIANS_PER_DEGREE),e=R.defaultValue(e.ellipsoid,N.Ellipsoid.WGS84);this._positions=t,this._minimumHeights=i,this._maximumHeights=a,this._vertexFormat=d.VertexFormat.clone(n),this._granularity=r,this._ellipsoid=N.Ellipsoid.clone(e),this._workerName="createWallGeometry";t=1+t.length*N.Cartesian3.packedLength+2;R.defined(i)&&(t+=i.length),R.defined(a)&&(t+=a.length),this.packedLength=t+N.Ellipsoid.packedLength+d.VertexFormat.packedLength+1}u.pack=function(e,t,a){var i;a=R.defaultValue(a,0);var n=e._positions,r=n.length;for(t[a++]=r,i=0;i<r;++i,a+=N.Cartesian3.packedLength)N.Cartesian3.pack(n[i],t,a);var o=e._minimumHeights,r=R.defined(o)?o.length:0;if(t[a++]=r,R.defined(o))for(i=0;i<r;++i)t[a++]=o[i];var s=e._maximumHeights;if(r=R.defined(s)?s.length:0,t[a++]=r,R.defined(s))for(i=0;i<r;++i)t[a++]=s[i];return N.Ellipsoid.pack(e._ellipsoid,t,a),a+=N.Ellipsoid.packedLength,d.VertexFormat.pack(e._vertexFormat,t,a),t[a+=d.VertexFormat.packedLength]=e._granularity,t};var c=N.Ellipsoid.clone(N.Ellipsoid.UNIT_SPHERE),f=new d.VertexFormat,y={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:c,vertexFormat:f,granularity:void 0};return u.unpack=function(e,t,a){t=R.defaultValue(t,0);for(var i,n,r=e[t++],o=new Array(r),s=0;s<r;++s,t+=N.Cartesian3.packedLength)o[s]=N.Cartesian3.unpack(e,t);if(0<(r=e[t++]))for(i=new Array(r),s=0;s<r;++s)i[s]=e[t++];if(0<(r=e[t++]))for(n=new Array(r),s=0;s<r;++s)n[s]=e[t++];var m=N.Ellipsoid.unpack(e,t,c);t+=N.Ellipsoid.packedLength;var l=d.VertexFormat.unpack(e,t,f),p=e[t+=d.VertexFormat.packedLength];return R.defined(a)?(a._positions=o,a._minimumHeights=i,a._maximumHeights=n,a._ellipsoid=N.Ellipsoid.clone(m,a._ellipsoid),a._vertexFormat=d.VertexFormat.clone(l,a._vertexFormat),a._granularity=p,a):(y.positions=o,y.minimumHeights=i,y.maximumHeights=n,y.granularity=p,new u(y))},u.fromConstantHeights=function(e){var t=(e=R.defaultValue(e,R.defaultValue.EMPTY_OBJECT)).positions,a=e.minimumHeight,i=e.maximumHeight,n=R.defined(a),r=R.defined(i);if(n||r)for(var o=t.length,s=n?new Array(o):void 0,m=r?new Array(o):void 0,l=0;l<o;++l)n&&(s[l]=a),r&&(m[l]=i);return new u({positions:t,maximumHeights:m,minimumHeights:s,ellipsoid:e.ellipsoid,vertexFormat:e.vertexFormat})},u.createGeometry=function(e){var t=e._positions,a=e._minimumHeights,i=e._maximumHeights,n=e._vertexFormat,r=e._granularity,o=e._ellipsoid,a=Y.WallGeometryLibrary.computePositions(o,t,i,a,r,!0);if(R.defined(a)){for(var s=a.bottomPositions,m=a.topPositions,r=a.numCorners,l=m.length,a=2*l,p=n.position?new Float64Array(a):void 0,d=n.normal?new Float32Array(a):void 0,u=n.tangent?new Float32Array(a):void 0,c=n.bitangent?new Float32Array(a):void 0,f=n.st?new Float32Array(a/3*2):void 0,y=0,g=0,h=0,C=0,v=0,A=te,x=ee,b=$,_=!0,E=0,w=1/((l/=3)-t.length+1),F=0;F<l;++F){var L,P,k=3*F,G=N.Cartesian3.fromArray(m,k,Z),H=N.Cartesian3.fromArray(s,k,j);n.position&&(p[y++]=H.x,p[y++]=H.y,p[y++]=H.z,p[y++]=G.x,p[y++]=G.y,p[y++]=G.z),n.st&&(f[v++]=E,f[v++]=0,f[v++]=E,f[v++]=1),(n.normal||n.tangent||n.bitangent)&&(P=N.Cartesian3.clone(N.Cartesian3.ZERO,X),H=o.scaleToGeodeticSurface(N.Cartesian3.fromArray(m,k,j),j),F+1<l&&(L=o.scaleToGeodeticSurface(N.Cartesian3.fromArray(m,3+k,K),K),P=N.Cartesian3.fromArray(m,3+k,X)),_&&(P=N.Cartesian3.subtract(P,G,Q),G=N.Cartesian3.subtract(H,G,Z),A=N.Cartesian3.normalize(N.Cartesian3.cross(G,P,A),A),_=!1),N.Cartesian3.equalsEpsilon(L,H,M.CesiumMath.EPSILON10)?_=!0:(E+=w,n.tangent&&(x=N.Cartesian3.normalize(N.Cartesian3.subtract(L,H,x),x)),n.bitangent&&(b=N.Cartesian3.normalize(N.Cartesian3.cross(A,x,b),b))),n.normal&&(d[g++]=A.x,d[g++]=A.y,d[g++]=A.z,d[g++]=A.x,d[g++]=A.y,d[g++]=A.z),n.tangent&&(u[C++]=x.x,u[C++]=x.y,u[C++]=x.z,u[C++]=x.x,u[C++]=x.y,u[C++]=x.z),n.bitangent&&(c[h++]=b.x,c[h++]=b.y,c[h++]=b.z,c[h++]=b.x,c[h++]=b.y,c[h++]=b.z))}t=new q.GeometryAttributes;n.position&&(t.position=new U.GeometryAttribute({componentDatatype:B.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:p})),n.normal&&(t.normal=new U.GeometryAttribute({componentDatatype:B.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:d})),n.tangent&&(t.tangent=new U.GeometryAttribute({componentDatatype:B.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:u})),n.bitangent&&(t.bitangent=new U.GeometryAttribute({componentDatatype:B.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:c})),n.st&&(t.st=new U.GeometryAttribute({componentDatatype:B.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:f}));var V=a/3;a-=6*(r+1);var T=J.IndexDatatype.createTypedArray(V,a),D=0;for(F=0;F<V-2;F+=2){var z=F,O=F+2,S=N.Cartesian3.fromArray(p,3*z,Z),I=N.Cartesian3.fromArray(p,3*O,j);N.Cartesian3.equalsEpsilon(S,I,M.CesiumMath.EPSILON10)||(S=F+1,I=F+3,T[D++]=S,T[D++]=z,T[D++]=I,T[D++]=I,T[D++]=z,T[D++]=O)}return new U.Geometry({attributes:t,indices:T,primitiveType:U.PrimitiveType.TRIANGLES,boundingSphere:new W.BoundingSphere.fromVertices(p)})}},function(e,t){return(e=R.defined(t)?u.unpack(e,t):e)._ellipsoid=N.Ellipsoid.clone(e._ellipsoid),u.createGeometry(e)}});
